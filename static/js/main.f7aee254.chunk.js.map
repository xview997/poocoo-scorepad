{"version":3,"sources":["BO/Gra.ts","BO/Gracz.ts","config.tsx","Components/InicjacjaGraczy.tsx","Components/Rozgrywka.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["StanGryTyp","Gracz","id","inicjaly","Gra","txt_Gracz","StanGry","Inicjacja","Gracze","DataStart","Date","DateEnd","Punkty","InicjujGraczyStartowych","DodajGracza","StanGryZapisz","StanGryWczytaj","nextId","length","Math","max","map","p","push","UsunGracza","splice","this","config","gra","InicjacjaGraczy","props","ZmianaStanuGry","useState","gracze","zmienGraczy","zmianaNazwyGracza","e","graczId","Number","currentTarget","value","slice","forEach","g","console","log","onClick","key","toString","onChange","Rozgrywka","App","stanGry","zmienStanGry","nowyStan","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7aee254.chunk.js","sourcesContent":["import { Gracz } from \"./Gracz\";\r\nimport { Punkt } from \"./Punkt\";\r\n\r\nexport enum StanGryTyp {\r\n  Inicjacja = 0,\r\n  Rozgrywka = 1,\r\n  DodawaniePunktow = 2,\r\n  Podsumowanie = 3,\r\n}\r\n\r\nexport class Gra {\r\n  private txt_Gracz = \"Gracz\";\r\n\r\n  public StanGry: StanGryTyp = StanGryTyp.Inicjacja;\r\n  public Gracze: Gracz[] = [];\r\n  public DataStart: Date = new Date();\r\n  public DateEnd: Date = new Date();\r\n  public Punkty: Punkt[] = [];\r\n\r\n  constructor() {\r\n    this.StanGryWczytaj();\r\n\r\n    if (this.Gracze.length === 0) {\r\n      this.InicjujGraczyStartowych();\r\n    }\r\n  }\r\n\r\n  InicjujGraczyStartowych = () => {\r\n    this.DodajGracza(`${this.txt_Gracz} 1`);\r\n    this.DodajGracza(`${this.txt_Gracz} 2`);\r\n  };\r\n\r\n  StanGryZapisz = () => {};\r\n\r\n  StanGryWczytaj = () => {};\r\n\r\n  DodajGracza = (inicjaly: string | null = null) => {\r\n    let nextId = 0;\r\n    if (this.Gracze.length !== 0) {\r\n      nextId = Math.max(...this.Gracze.map((p) => p.id)) + 1;\r\n    }\r\n    this.Gracze.push(\r\n      new Gracz(nextId, inicjaly ?? `${this.txt_Gracz} ${nextId + 1}`)\r\n    );\r\n  };\r\n\r\n  // usuwa ostaniego gracza\r\n  UsunGracza = () => {\r\n    if (this.Gracze.length !== 1) {\r\n      this.Gracze.splice(-1, 1);\r\n    }\r\n  };\r\n}\r\n","export class Gracz {\r\n  constructor(public id: number, public inicjaly: string) {}\r\n}\r\n","import { Gra } from \"./BO/Gra\";\r\n\r\nclass Config {\r\n  public gra: Gra = new Gra();\r\n}\r\n\r\nvar config = new Config();\r\nexport default config;\r\n","import React, { useState } from \"react\";\r\nimport { Gra, StanGryTyp } from \"../BO/Gra\";\r\nimport config from \"../config\";\r\nimport \"./InicjacjaGraczy.css\";\r\n\r\ninterface InicjacjaGraczyProps {\r\n  ZmianaStanuGry(StanGry: StanGryTyp): void;\r\n}\r\n\r\nexport const InicjacjaGraczy: React.SFC<InicjacjaGraczyProps> = (props) => {\r\n  const txt_DodajGracza = \"Dodaj gracza\";\r\n  const txt_UsunGracza = \"Usuń gracza\";\r\n  const txt_StartGry = \"Start gry\";\r\n\r\n  const { ZmianaStanuGry } = props;\r\n  const { gra } = config;\r\n\r\n  const [gracze, zmienGraczy] = useState(gra.Gracze);\r\n\r\n  const zmianaNazwyGracza = (e: React.FormEvent<HTMLInputElement>) => {\r\n    var graczId: number = Number(e.currentTarget.id);\r\n    var inicjaly = e.currentTarget.value;\r\n    var gracze = gra.Gracze.slice();\r\n    gracze.forEach((g) => {\r\n      if (g.id === graczId) {\r\n        g.inicjaly = inicjaly;\r\n      }\r\n    });\r\n    gra.Gracze = gracze;\r\n    zmienGraczy(gracze);\r\n    console.log(Gra);\r\n  };\r\n\r\n  const dodajGracza = () => {\r\n    config.gra.DodajGracza();\r\n    zmienGraczy(gra.Gracze.slice());\r\n  };\r\n\r\n  const usunGracza = () => {\r\n    gra.UsunGracza();\r\n    zmienGraczy(gra.Gracze.slice());\r\n  };\r\n\r\n  const generujInputy = () => {\r\n    return gracze.map((g) => {\r\n      return (\r\n        <input\r\n          key={g.id}\r\n          id={g.id.toString()}\r\n          value={g.inicjaly}\r\n          onChange={zmianaNazwyGracza}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  const startGry = () => {\r\n    ZmianaStanuGry(StanGryTyp.Rozgrywka);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {console.log(\"render\")}\r\n      <button onClick={dodajGracza}>{txt_DodajGracza}</button>\r\n      <button onClick={usunGracza}>{txt_UsunGracza}</button>\r\n      <p>Ilość graczy: {gra.Gracze.length}</p>\r\n      {generujInputy()}\r\n      <button onClick={startGry}>{txt_StartGry}</button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Gra, StanGryTyp } from \"../BO/Gra\";\r\nimport config from \"../config\";\r\n\r\nexport const Rozgrywka = () => {\r\n  return (\r\n    <>\r\n      <p>Rozgrywka</p>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Gra } from \"../BO/Gra\";\nimport { StanGryTyp } from \"../BO/Gra\";\nimport { InicjacjaGraczy } from \"./InicjacjaGraczy\";\nimport config from \"../config\";\nimport { Rozgrywka } from \"./Rozgrywka\";\n\nconst App = () => {\n  const [stanGry, zmienStanGry] = useState(config.gra.StanGry);\n\n  const zmianaStanuGry = (nowyStan: StanGryTyp) => {\n    config.gra.StanGry = nowyStan;\n    zmienStanGry(config.gra.StanGry);\n  };\n\n  return (\n    <>\n      {console.log(\"App\")}\n      {console.log(config.gra)}\n      {stanGry === StanGryTyp.Inicjacja && (\n        <InicjacjaGraczy ZmianaStanuGry={zmianaStanuGry} />\n      )}\n      {stanGry === StanGryTyp.Rozgrywka && <Rozgrywka />}\n      <p>dasdas</p>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}